@model ONLINE_TICKET_BOOKING_SYSTEM.Models.Air.Airport
@{
    ViewData["Title"] = "Delete Airport";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<h3>Delete Airport</h3>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @foreach (var e in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <div>@e.ErrorMessage</div>
        }
    </div>
}

<div class="alert alert-warning mb-3">
    Are you sure you want to delete <strong>@Model.Name</strong> (@Model.IataCode)?
</div>

<form id="deleteForm" method="post" action="/Airports/DeleteConfirmed/@Model.Id">
    @Html.AntiForgeryToken()
    <button class="btn btn-danger" type="submit">Delete</button>
    <a class="btn btn-secondary" href="/Airports/Index">Cancel</a>
</form>

<script>
    (function () {
        const $form = $("#deleteForm");
        $form.on("submit", function (e) {
            e.preventDefault();

            Swal.fire({
                icon: "warning",
                title: "Confirm delete?",
                showCancelButton: true,
                confirmButtonText: "Delete"
            }).then(res => {
                if (!res.isConfirmed) return;

                Swal.fire({ title: "Deleting...", allowOutsideClick: false, didOpen: () => Swal.showLoading() });

                $.ajax({
                    url: $form.attr("action"),
                    type: "POST",
                    data: $form.serialize(),
                    headers: { "X-Requested-With": "XMLHttpRequest" } // so controller knows it's AJAX
                })
                .done(function (r) {
                    if (r && r.ok) {
                        Swal.fire({ icon: "success", title: "Deleted" })
                            .then(() => window.location = r.redirect || "/Airports/Index");
                    } else {
                        Swal.fire({ icon: "error", title: "Failed", text: (r && r.message) || "Unexpected response." });
                    }
                })
                .fail(function (xhr) {
                    let msg = "Error";
                    try {
                        const r = JSON.parse(xhr.responseText);
                        if (r && r.message) msg = r.message;
                    } catch {
                        msg = xhr.responseText || xhr.statusText || msg;
                    }
                    Swal.fire({ icon: "error", title: "Failed", text: msg });
                });
            });
        });
    })();
</script>
