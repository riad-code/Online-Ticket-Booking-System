@model ApplicationUser
@{
    ViewData["Title"] = "My Profile";
}

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<style>
    /* Original styles (unchanged) */
    body {
        background: #f6f9f8;
        font-family: 'Segoe UI', Tahoma, sans-serif;
    }

    .sidebar a,
    .sidebar button {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #2f855a;
        font-weight: 600;
        text-decoration: none;
        font-size: 15px;
        margin-bottom: 15px;
    }

    .sidebar button {
        all: unset;
        cursor: pointer;
    }

    .btn-action {
        background: #38a169;
        color: #fff;
        border: none;
        border-radius: 6px;
        padding: 8px 14px;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 6px;
        font-weight: 600;
        cursor: pointer;
    }

        .btn-action.cancel {
            background: #e53e3e;
        }

        .btn-action:hover {
            opacity: 0.9;
        }

    .profile-img {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 15px;
    }

    .field-card {
        background: #f9fafb;
        border-radius: 10px;
        padding: 14px 18px;
        margin-bottom: 16px;
        border: 1px solid #e2e8f0;
    }

    .field-label {
        font-size: 12px;
        font-weight: 700;
        color: #e67e22;
        text-transform: uppercase;
        margin-bottom: 6px;
    }

    .field-value {
        font-size: 16px;
        font-weight: 600;
        color: #1a202c;
    }

    .editable-input {
        display: none;
        margin-top: 6px;
        width: 100%;
        padding: 8px;
        border: 1.5px solid #cbd5e0;
        border-radius: 6px;
    }

    #profileImageUploadField {
        display: none;
        margin-bottom: 15px;
    }

    /* Small addition for required star (visual only, no layout change) */
    .req-star {
        color: #dc3545;
        font-weight: 700;
    }
</style>

<div class="container py-4">
    <div class="row g-4">
        <!-- Sidebar -->
        <div class="col-12 col-md-4 col-lg-3">
            <div class="sidebar bg-white p-3 rounded shadow-sm">
                <a asp-controller="Account" asp-action="Profile"><span class="material-icons">person</span> My Profile</a>
                <a asp-area="Identity" asp-page="/Account/ResetPassword"><span class="material-icons">lock</span> Change Password</a>
                <form asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                    <button type="submit" style="display:flex; align-items:center; color: green; gap:5px; font-weight:600;">
                        <span class="material-icons">logout</span> Logout
                    </button>
                </form>
            </div>
        </div>

        <!-- Profile Content -->
        <div class="col-12 col-md-8 col-lg-9">
            <div class="bg-white p-4 rounded shadow-sm">
                <div class="d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center mb-4">
                    <h2 class="fw-bold mb-3 mb-sm-0">Profile Details</h2>
                    <div class="d-flex gap-2">
                        <button id="editBtn" class="btn-action">
                            <span class="material-icons fw-bold">edit</span> Update Profile
                        </button>
                        <button id="cancelBtn" class="btn-action cancel d-none">
                            <span class="material-icons">close</span> Cancel
                        </button>
                    </div>
                </div>

                <div class="text-center mb-3">
                    <img id="profilePreview" class="profile-img" src="@(string.IsNullOrEmpty(Model.ProfileImagePath) ? "/images/default.png" : Model.ProfileImagePath)" />
                </div>

                <form id="profileForm" enctype="multipart/form-data">
                    <input type="hidden" name="Id" value="@Model.Id" />

                    <div id="profileImageUploadField" class="mb-3">
                        <label class="field-label d-block mb-2">Upload New Picture</label>
                        <input type="file" name="ProfileImage" id="ProfileImage" class="form-control" accept="image/*" onchange="previewImage(event)" />
                    </div>

                    <!-- Title -->
                    <div class="field-card">
                        <div class="field-label">Title</div>
                        <div class="field-value">@Model.Title</div>
                        <select class="editable-input form-select" name="Title">
                            <option value="">Select Title</option>
                            <option value="Mr." selected="@(Model.Title == "Mr.")">Mr.</option>
                            <option value="Mrs." selected="@(Model.Title == "Mrs.")">Mrs.</option>
                        </select>
                    </div>

                    <!-- Full Name (Required) -->
                    <div class="field-card">
                        <div class="field-label">Full Name</div>
                        <div class="field-value">@($"{Model.FirstName} {Model.LastName}")</div>
                        <input type="text" class="editable-input" name="FirstName" value="@Model.FirstName" placeholder="First Name" required />
                        <input type="text" class="editable-input mt-2" name="LastName" value="@Model.LastName" placeholder="Last Name" required />
                    </div>

                    <!-- Email (read-only) -->
                    <div class="field-card">
                        <div class="field-label">Email</div>
                        <div class="field-value">@Model.Email</div>
                        <input type="email" class="editable-input" name="Email" value="@Model.Email" readonly />
                    </div>

                    <!-- Phone (Required) -->
                    <div class="field-card">
                        <div class="field-label">Phone Number</div>
                        <div class="field-value">@Model.MobileNumber</div>
                        <input type="text" class="editable-input" name="MobileNumber" maxlength="11" pattern="\d{11}" value="@Model.MobileNumber" required />
                    </div>

                    <!-- Gender (Required) -->
                    <div class="field-card">
                        <div class="field-label">Gender</div>
                        <div class="field-value">@Model.Gender</div>
                        <select class="editable-input form-select" name="Gender" required>
                            <option value="">Select Gender</option>
                            <option value="Male" selected="@(Model?.Gender == "Male")">Male</option>
                            <option value="Female" selected="@(Model?.Gender == "Female")">Female</option>
                            <option value="Other" selected="@(Model?.Gender == "Other")">Other</option>
                        </select>
                    </div>

                    <!-- Date of Birth (Required) -->
                    <div class="field-card">
                        <div class="field-label">Date of Birth</div>
                        <div class="field-value">@Model.DateOfBirth?.ToString("dd MMM yyyy")</div>
                        <input type="date" class="editable-input" name="DateOfBirth" value="@Model.DateOfBirth?.ToString("yyyy-MM-dd")" required />
                    </div>

                    <!-- Address (Optional) -->
                    <div class="field-card">
                        <div class="field-label">Address</div>
                        <div class="field-value">@Model.Address</div>
                        <textarea class="editable-input form-control" name="Address">@Model.Address</textarea>
                    </div>

                    <!-- Passport (Optional) -->
                    <div class="field-card">
                        <div class="field-label">Passport Number</div>
                        <div class="field-value">@Model.PassportNo</div>
                        <input type="text" class="editable-input" name="PassportNo" value="@Model.PassportNo" />
                    </div>

                    <!-- Visa (Optional) -->
                    <div class="field-card">
                        <div class="field-label">Visa Number</div>
                        <div class="field-value">@Model.VisaNo</div>
                        <input type="text" class="editable-input" name="VisaNo" value="@Model.VisaNo" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    .sidebar {
        z-index: 1;
        position: relative;
    }

    .navbar {
        position: relative;
        z-index: 1030;
    }

        .navbar .dropdown-menu {
            position: absolute;
            z-index: 1055 !important;
        }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script>
    const editBtn = document.getElementById('editBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    const profileForm = document.getElementById('profileForm');
    let isEditing = false;

    editBtn.addEventListener('click', () => {
        if (!isEditing) {
            toggleEdit(true);
            editBtn.innerHTML = '<span class="material-icons">save</span> Update';
            cancelBtn.classList.remove('d-none');
            isEditing = true;
        } else {
            saveProfile();
        }
    });

    cancelBtn.addEventListener('click', () => location.reload());

    function toggleEdit(enable) {
        document.querySelectorAll('.editable-input').forEach(el => el.style.display = enable ? 'block' : 'none');
        document.querySelectorAll('.field-value').forEach(el => el.style.display = enable ? 'none' : 'block');
        document.getElementById('profileImageUploadField').style.display = enable ? 'block' : 'none';

        if (enable) {
            addStarsToRequiredLabels();
            applyGenderFromTitle(); // ensure initial sync when edit opens
        }
    }

    function previewImage(event) {
        const output = document.getElementById('profilePreview');
        if (event.target.files && event.target.files[0]) {
            output.src = URL.createObjectURL(event.target.files[0]);
        }
    }

    // === Required star on specific labels (visual only) ===
    function addStarsToRequiredLabels(){
        const labelMap = {
            "Full Name": true,
            "Phone Number": true,
            "Gender": true,
            "Date of Birth": true
        };
        document.querySelectorAll('.field-card .field-label').forEach(lbl=>{
            const text = (lbl.textContent || '').trim();
            if (labelMap[text] && !lbl.querySelector('.req-star')){
                const s = document.createElement('span');
                s.className = 'req-star';
                s.textContent = ' *';
                lbl.appendChild(s);
            }
        });
    }

    // === Title -> Gender auto map (Mr. => Male, Mrs. => Female) ===
    function applyGenderFromTitle() {
        const titleSelect  = document.querySelector('select[name="Title"]');
        const genderSelect = document.querySelector('select[name="Gender"]');
        if (!titleSelect || !genderSelect) return;

        const v = (titleSelect.value || '').toLowerCase().replace(/\./g,'').trim();
        if (v === 'mr')  genderSelect.value = 'Male';
        if (v === 'mrs') genderSelect.value = 'Female';
    }

    (function wireTitleGenderMapping(){
        const titleSelect = document.querySelector('select[name="Title"]');
        if (titleSelect) {
            titleSelect.addEventListener('change', applyGenderFromTitle);
        }
    })();

    // === Ensure inputs have required/pattern like Register ===
    (function markRequiredInputs(){
        const q = (sel)=>document.querySelector(sel);
        [
            'input[name="FirstName"]',
            'input[name="LastName"]',
            'input[name="MobileNumber"]',
            'select[name="Gender"]',
            'input[name="DateOfBirth"]'
        ].forEach(sel=>{
            const el = q(sel);
            if (el) el.setAttribute('required','required');
        });
        const mob = q('input[name="MobileNumber"]');
        if (mob){ mob.setAttribute('pattern','\\d{11}'); mob.setAttribute('maxlength','11'); }
    })();

    // === Client-side validation (mirror Register page rules) ===
    function validateProfileForm(){
        const get = (n)=>document.querySelector(`[name="${n}"]`);
        const errs = [];

        const firstName = (get('FirstName')?.value || '').trim();
        const lastName  = (get('LastName')?.value  || '').trim();
        const mobile    = (get('MobileNumber')?.value || '').trim();
        const gender    = (get('Gender')?.value || '').trim();
        const dobStr    = (get('DateOfBirth')?.value || '').trim();

        if(!firstName) errs.push('First Name is required.');
        if(!lastName)  errs.push('Last Name is required.');
        if(!mobile)    errs.push('Mobile Number is required.');
        else if(!/^\d{11}$/.test(mobile)) errs.push('Mobile Number must be exactly 11 digits.');
        if(!gender)    errs.push('Gender is required.');
        if(!dobStr)    errs.push('Date of birth is required.');
        else {
            const dob = new Date(dobStr);
            const today = new Date();
            const cutoff = new Date(today.getFullYear()-18, today.getMonth(), today.getDate());
            if(dob > cutoff) errs.push('You must be at least 18 years old.');
        }

        return errs;
    }

    function saveProfile() {
        const errs = validateProfileForm();
        if (errs.length){
            if (window.Swal) Swal.fire('Fix these first', errs.join('\n'), 'error');
            else alert(errs.join('\n'));
            return;
        }

        const formData = new FormData(profileForm);
        $.ajax({
            url: '@Url.Action("UpdateProfile", "Account")',
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
                if (response.success) {
                    Swal.fire({ icon: 'success', title: 'Profile Updated', timer: 1500, showConfirmButton: false })
                        .then(() => location.reload());
                } else {
                    if (response.errors) {
                        const msgs = Object.values(response.errors).map(v => Array.isArray(v) ? v.join('\n') : v).join('\n');
                        Swal.fire('Error', msgs, 'error');
                    } else {
                        Swal.fire('Error', response.message || 'Update failed.', 'error');
                    }
                }
            },
            error: function () {
                Swal.fire('Oops!', 'Something went wrong.', 'error');
            }
        });
    }

    // Initialize in view mode
    toggleEdit(false);
</script>
