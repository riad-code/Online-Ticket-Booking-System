@model ONLINE_TICKET_BOOKING_SYSTEM.ViewModels.BusSearchResultViewModel
@using Newtonsoft.Json

@{
    ViewData["Title"] = "Bus Search Results";
    Layout = "_Layout";

    // Server-made base URL for seat page
    var seatsUrlBase = Url.Action("Seats", "Booking"); // => /Booking/Seats
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    body {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f6f9f8;
    }

    .search-header {
        background: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .btn-green {
        background-color: #00b34b;
        color: white;
        font-weight: 600;
    }

        .btn-green:hover {
            background-color: #00903a;
        }

    .filter-box, .bus-card {
        background: #fff;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
    }

    .badge-discount {
        background-color: #ffe0b2;
        color: #ff6f00;
        font-weight: bold;
    }

    .price-old {
        text-decoration: line-through;
        color: #999;
        font-size: 14px;
    }

    .step-line {
        font-size: 13px;
        color: #777;
    }

    .ui-menu .ui-menu-item-wrapper:hover,
    .ui-menu .ui-menu-item-wrapper.ui-state-active {
        background-color: #198754 !important; /* green */
        color: #fff !important;
        border: none !important;
    }

    /* 🔘 Info buttons look like badges but are real buttons (no underline) */
    .info-btn {
        border: 1px solid #198754;
        background: #198754;
        color: #fff;
        border-radius: 0.5rem;
        padding: 4px 10px;
        font-size: 12px;
        line-height: 1.1;
        margin-right: .35rem;
        margin-bottom: .35rem;
        display: inline-block;
        cursor: pointer;
    }

        .info-btn:hover {
            filter: brightness(0.95);
        }
</style>
<div class="container-fluid mt-4">
    <!-- 🔍 Top Search Form -->
    <div class="search-header">
        <div class="bg-white rounded-4 shadow-lg p-4">
            <!-- Toggle Buttons -->
            <div class="d-flex justify-content-center gap-4 mb-4">
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="tripType" id="oneWay" value="One Way" @(Model.TripType?.Equals("One Way", StringComparison.OrdinalIgnoreCase) == true ? "checked" : "") />
                    <label class="form-check-label fw-semibold" for="oneWay">One Way</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="tripType" id="roundWay" value="Round Way" @(Model.TripType?.Equals("Round Way", StringComparison.OrdinalIgnoreCase) == true ? "checked" : "") />
                    <label class="form-check-label fw-semibold" for="roundWay">Round Way</label>
                </div>
            </div>

            <!-- Form -->
            <form id="busSearchForm" class="row g-3 align-items-end" method="get" action="/Bus/Results">
                <div class="col-md-3">
                    <label class="form-label text-muted">From</label>
                    <div class="input-group">
                        <span class="input-group-text bg-white border-end-0"><i class="bi bi-geo-alt-fill text-success"></i></span>
                        <input type="text" id="fromInput" name="from" class="form-control border-start-0" placeholder="Enter departure city" required />
                    </div>
                </div>
                <div class="col-md-3">
                    <label class="form-label text-muted">To</label>
                    <div class="input-group">
                        <span class="input-group-text bg-white border-end-0"><i class="bi bi-geo-alt-fill text-success"></i></span>
                        <input type="text" id="toInput" name="to" class="form-control border-start-0" placeholder="Enter destination city" required />
                    </div>
                </div>
                <div class="col-md-2">
                    <label class="form-label text-muted">Journey Date</label>
                    <input type="text" id="journeyDate" name="journeyDate" class="form-control" required readonly />
                </div>
                <div class="col-md-2" id="returnDateDiv">
                    <label class="form-label text-muted">Return Date</label>
                    <input type="text" id="returnDate" name="returnDate" class="form-control" readonly />
                </div>
                <div class="col-md-2 d-flex justify-content-end">
                    <button type="submit" class="btn btn-success btn-lg fw-semibold w-100">
                        <i class="bi bi-search me-1"></i> Search
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="row">
        <!-- Filters (LEFT) -->
        <div class="col-md-3">
            <div class="filter-box">
                <h6><strong>Filters</strong></h6>
                <hr />
                <button class="btn btn-outline-success btn-sm w-100 mb-3" onclick="resetFilters()">RESET</button>

                <div class="mb-3">
                    <strong class="text-warning">BUS TYPE</strong>
                    <div class="form-check"><input class="form-check-input" type="checkbox" id="ac" /><label class="form-check-label" for="ac">AC</label></div>
                    <div class="form-check"><input class="form-check-input" type="checkbox" id="nonac" /><label class="form-check-label" for="nonac">Non AC</label></div>
                </div>

                <div class="mb-3">
                    <strong class="text-warning">OPERATOR</strong>
                    <select class="form-control" id="operatorSelect">
                        <option disabled selected>Search Operator</option>
                        @foreach (var op in Model.AllOperators ?? new List<string>())
                        {
                            <option>@op</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <strong class="text-warning">BOARDING POINT</strong>
                    <select class="form-control" id="boardingSelect">
                        <option disabled selected>Search Boarding</option>
                        @foreach (var bp in Model.AllBoardingPoints ?? new List<string>())
                        {
                            <option>@bp</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <strong class="text-warning">DROPPING POINT</strong>
                    <select class="form-control" id="droppingSelect">
                        <option disabled selected>Search Dropping</option>
                        @foreach (var dp in Model.AllDroppingPoints ?? new List<string>())
                        {
                            <option>@dp</option>
                        }
                    </select>
                </div>

                <p class="mb-2 mt-4 fw-bold text-warning">DEPARTURE TIME</p>
                <div class="form-check mb-2 border p-3 rounded bg-light">
                    <input class="form-check-input" type="checkbox" id="departureMorning" />
                    <label class="form-check-label" for="departureMorning">☀️ Morning<br /><small class="text-muted">06:00 AM - 12:00 PM</small></label>
                </div>
                <div class="form-check mb-2 border p-3 rounded bg-light">
                    <input class="form-check-input" type="checkbox" id="departureAfternoon" />
                    <label class="form-check-label" for="departureAfternoon">🌤️ Afternoon<br /><small class="text-muted">12:00 PM - 06:00 PM</small></label>
                </div>
                <div class="form-check mb-2 border p-3 rounded bg-light">
                    <input class="form-check-input" type="checkbox" id="departureEvening" />
                    <label class="form-check-label" for="departureEvening">🌙 Evening<br /><small class="text-muted">06:00 PM - 12:00 AM</small></label>
                </div>
                <div class="form-check mb-2 border p-3 rounded bg-light">
                    <input class="form-check-input" type="checkbox" id="departureEarlyMorning" />
                    <label class="form-check-label" for="departureEarlyMorning">🌄 Early Morning<br /><small class="text-muted">Before 06:00 AM</small></label>
                </div>

                <p class="mb-2 mt-4 fw-bold text-warning">ARRIVAL TIME</p>
                <div class="form-check mb-2 border p-3 rounded bg-light">
                    <input class="form-check-input" type="checkbox" id="arrivalMorning" />
                    <label class="form-check-label" for="arrivalMorning">☀️ Morning<br /><small class="text-muted">06:00 AM - 12:00 PM</small></label>
                </div>
                <div class="form-check mb-2 border p-3 rounded bg-light">
                    <input class="form-check-input" type="checkbox" id="arrivalAfternoon" />
                    <label class="form-check-label" for="arrivalAfternoon">🌤️ Afternoon<br /><small class="text-muted">12:00 PM - 06:00 PM</small></label>
                </div>
                <div class="form-check mb-2 border p-3 rounded bg-light">
                    <input class="form-check-input" type="checkbox" id="arrivalEvening" />
                    <label class="form-check-label" for="arrivalEvening">🌙 Evening<br /><small class="text-muted">06:00 PM - 12:00 AM</small></label>
                </div>
                <div class="form-check mb-2 border p-3 rounded bg-light">
                    <input class="form-check-input" type="checkbox" id="arrivalEarlyMorning" />
                    <label class="form-check-label" for="arrivalEarlyMorning">🌄 Early Morning<br /><small class="text-muted">Before 06:00 AM</small></label>
                </div>
            </div>
        </div>

        <!-- Results (RIGHT) -->
        <div class="col-md-9">
            <div class="step-line alert bg-success text-white fw-bold">
                Choose Departing Ticket <i class="fa fa-chevron-right mx-1"></i>
                Passenger Details <i class="fa fa-chevron-right mx-1"></i>
                Review & Pay
            </div>
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>
                    <h5>
                        Buses from <strong class="text-success">@Model.From</strong> to <strong class="text-success">@Model.To</strong> on
                        <strong>@Model.JourneyDate.ToString("ddd, dd MMM yyyy")</strong>
                    </h5>
                </div>
                <div>
                    <button class="btn btn-outline-success btn-sm me-2">LOW TO HIGH</button>
                    <button class="btn btn-outline-success btn-sm">HIGH TO LOW</button>
                </div>
            </div>

            <div id="mainBusesContainer"></div>

            @if (Model.ReturnDate != null && Model.ReturnBuses != null && Model.ReturnBuses.Any())
            {
                <h5>
                    Return Buses from <strong class="text-success">@Model.To</strong> to <strong class="text-success">@Model.From</strong> on
                    <strong>@Model.ReturnDate?.ToString("ddd, dd MMM yyyy")</strong>
                </h5>
                <div id="returnBusesContainer"></div>
            }
        </div>
    </div>
</div>

<script>
    function resetFilters() {
        document.querySelectorAll('.filter-box input[type="checkbox"]').forEach(cb => cb.checked = false);
        document.querySelectorAll('.filter-box select').forEach(sel => sel.selectedIndex = 0);
        Swal.fire({ icon: 'success', title: 'Filters reset', showConfirmButton: false, timer: 1000 })
             .then(() => location.reload());
    }
</script>

<script type="application/json" id="busesJson">
    @Html.Raw(JsonConvert.SerializeObject(Model.AvailableBuses ?? new List<ONLINE_TICKET_BOOKING_SYSTEM.Models.BusSchedule>()))
</script>
<script type="application/json" id="returnBusesJson">
    @Html.Raw(JsonConvert.SerializeObject(Model.ReturnBuses ?? new List<ONLINE_TICKET_BOOKING_SYSTEM.Models.BusSchedule>()))
</script>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css" />
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        $(function () {
            $("#journeyDate").datepicker({
                dateFormat: "yy-mm-dd",
                minDate: 0,
                onSelect: function (selectedDate) {
                    var selected = new Date(selectedDate);
                    $("#returnDate").datepicker("option", "minDate", selected);
                }
            });
            $("#returnDate").datepicker({ dateFormat: "yy-mm-dd", minDate: 0 });

            let allBuses = [], allReturnBuses = [];
            try { allBuses = JSON.parse(document.getElementById('busesJson').textContent); } catch {}
            try { allReturnBuses = JSON.parse(document.getElementById('returnBusesJson').textContent); } catch {}

            function toggleReturnDate(){ $('#oneWay').is(':checked') ? $('#returnDateDiv').hide() : $('#returnDateDiv').show(); }
            toggleReturnDate();
            $('input[name="tripType"]').change(toggleReturnDate);

            $("#fromInput, #toInput").autocomplete({
                source: (request, response) => $.getJSON('/Bus/GetLocationSuggestions', { term: request.term }, response),
                minLength: 1
            });

            function escapeHtml(str){ return String(str||'').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#039;'); }
            function splitCsv(csv){ return !csv ? [] : String(csv).split(',').map(s=>s.trim()).filter(Boolean); }
            function listHtmlFromCsv(csv){
                const arr = splitCsv(csv);
                if(!arr.length) return '<em>Not provided by operator.</em>';
                return '<ul style="text-align:left;margin:0;padding-left:18px;">' + arr.map(i=>`<li>${escapeHtml(i)}</li>`).join('') + '</ul>';
            }

            function renderBuses(buses, containerSelector){
                const container = $(containerSelector).empty();
                if(!buses || !buses.length){
                    container.append('<div class="alert alert-warning">No buses found for the selected filters.</div>');
                    return;
                }
                buses.forEach(bus=>{
                    const scheduleId = bus.Id ?? bus.id ?? bus.scheduleId ?? 0;
                    const disabled = scheduleId <= 0 ? 'disabled' : '';
                    const card = `
                    <div class="bus-card d-flex justify-content-between align-items-start flex-wrap">
                        <div class="me-4">
                            <h5 class="text-success">${bus.OperatorName}</h5>
                            <div class="text-muted mb-1">${bus.BusType}</div>
                            <div class="text-muted small">Route: ${bus.FullRoute}</div>
                            <span class="badge badge-discount mt-2">🎉 Get 30 TK Discount</span>
                            <div class="mt-2">
                                <button type="button" class="info-btn btn-cancel">Cancellation Policy</button>
                                <button type="button" class="info-btn btn-board">Boarding Point</button>
                                <button type="button" class="info-btn btn-drop">Dropping Point</button>
                                <button type="button" class="info-btn btn-amen">Amenities</button>
                            </div>
                        </div>
                        <div class="text-end">
                            <div class="d-flex align-items-center justify-content-end mb-2">
                                <div class="me-3 text-center">
                                    <strong>${bus.DepartureTime.substring(0,5)}</strong><br />
                                    <small class="text-muted">${new Date(bus.JourneyDate).toLocaleDateString('en-GB',{weekday:'short',day:'2-digit',month:'short'})}</small><br />
                                    <span class="text-muted">${bus.From}</span>
                                </div>
                                <div class="text-center mx-2">
                                    <i class="fa fa-arrow-right text-success"></i><br />
                                    <small class="text-muted">${calculateDuration(bus.DepartureTime,bus.ArrivalTime)}</small>
                                </div>
                                <div class="ms-3 text-center">
                                    <strong>${bus.ArrivalTime.substring(0,5)}</strong><br />
                                    <small class="text-muted">${new Date(bus.JourneyDate).toLocaleDateString('en-GB',{weekday:'short',day:'2-digit',month:'short'})}</small><br />
                                    <span class="text-muted">${bus.To}</span>
                                </div>
                            </div>
                            <div class="mb-1">
                                <span class="price-old">৳${bus.Fare}</span>
                                <span class="text-success fw-bold fs-5 ms-2">৳${bus.Fare - 30}</span>
                            </div>
                            <div class="text-muted small mb-2">${bus.SeatsAvailable} Seat(s) Available</div>
                            <a class="btn btn-outline-success btn-green btn-sm ${disabled}" href="${'@seatsUrlBase'}?scheduleId=${scheduleId}">BOOK TICKET</a>
                        </div>
                    </div>`;
                    const $el = $(card);
                    $el.data('bus', bus);
                    container.append($el);
                });
            }

            // Info modals
            $(document).on('click','.btn-cancel',function(){
                const bus = $(this).closest('.bus-card').data('bus') || {};
                const policy = bus.CancellationPolicy || bus.cancellationPolicy || '';
                const html = policy ? `<div style="text-align:left;">${escapeHtml(policy).replace(/\n/g,'<br>')}</div>`
                                    : '**General Cancellation Policy:** <br/> <ul><li> **100% Refund:** Up to 48 hours before departure.</li><li> **80% Refund:** Between 24 and 48 hours before departure.</li><li> **No Refund:** Within 24 hours of departure.</li></ul><small>Note: All refunds exclude service fees and are processed within 5-7 business days.</small>';
                Swal.fire({ title: 'Cancellation Policy', html, icon: 'info' });
            });
            $(document).on('click','.btn-board',function(){
                const bus = $(this).closest('.bus-card').data('bus') || {};
                Swal.fire({ title:'Boarding Points', html:listHtmlFromCsv(bus.BoardingPointsString||bus.boardingPointsString||''), icon:'info' });
            });
            $(document).on('click','.btn-drop',function(){
                const bus = $(this).closest('.bus-card').data('bus') || {};
                Swal.fire({ title:'Dropping Points', html:listHtmlFromCsv(bus.DroppingPointsString||bus.droppingPointsString||''), icon:'info' });
            });
            $(document).on('click','.btn-amen',function(){
                const bus = $(this).closest('.bus-card').data('bus') || {};
                Swal.fire({ title:'Amenities', html:listHtmlFromCsv(bus.AmenitiesString||bus.amenitiesString||''), icon:'info' });
            });

            function calculateDuration(departure, arrival){
                const [dh,dm]=departure.split(':').map(Number);
                const [ah,am]=arrival.split(':').map(Number);
                let H=ah-dh, M=am-dm; if(M<0){M+=60;H--} if(H<0)H+=24; return `${H}h ${M}m`;
            }
            function timeInRanges(t, ranges){
                const [h,m]=t.split(':').map(Number), total=h*60+m;
                return ranges.some(r => (r==='Early Morning' && total<360) ||
                                        (r==='Morning' && total>=360 && total<720) ||
                                        (r==='Afternoon' && total>=720 && total<1080) ||
                                        (r==='Evening' && total>=1080 && total<1440));
            }

            function applyFilters(){
                const acChecked=$('#ac').is(':checked');
                const nonAcChecked=$('#nonac').is(':checked');
                const operator=$('#operatorSelect').val();
                const boarding=$('#boardingSelect').val();
                const dropping=$('#droppingSelect').val();

                const dep=[], arr=[];
                if($('#departureEarlyMorning').is(':checked')) dep.push('Early Morning');
                if($('#departureMorning').is(':checked')) dep.push('Morning');
                if($('#departureAfternoon').is(':checked')) dep.push('Afternoon');
                if($('#departureEvening').is(':checked')) dep.push('Evening');

                if($('#arrivalEarlyMorning').is(':checked')) arr.push('Early Morning');
                if($('#arrivalMorning').is(':checked')) arr.push('Morning');
                if($('#arrivalAfternoon').is(':checked')) arr.push('Afternoon');
                if($('#arrivalEvening').is(':checked')) arr.push('Evening');

                function filterOne(bus){
                    const busType = (bus.BusType||'').toLowerCase().replace(/[^a-z]/g,'');
                    const isAc = busType.includes('ac') && !busType.includes('non');
                    const isNonAc = busType.includes('nonac') || busType.includes('non');

                    if(acChecked || nonAcChecked){
                        if(acChecked && !nonAcChecked && !isAc) return false;
                        if(!acChecked && nonAcChecked && !isNonAc) return false;
                    }
                    if(operator && operator!=='Search Operator' && operator!=='Other' && bus.OperatorName!==operator) return false;
                    if(boarding && boarding!=='Search Boarding' && boarding!=='Other' && !((bus.BoardingPointsString||'').includes(boarding))) return false;
                    if(dropping && dropping!=='Search Dropping' && dropping!=='Other' && !((bus.DroppingPointsString||'').includes(dropping))) return false;

                    if(dep.length && !timeInRanges(bus.DepartureTime, dep)) return false;
                    if(arr.length && !timeInRanges(bus.ArrivalTime, arr)) return false;

                    return true;
                }

                const filteredMain = (allBuses||[]).filter(filterOne);
                const filteredReturn = (allReturnBuses||[]).filter(filterOne);

                renderBuses(filteredMain, '#mainBusesContainer');
                if($('#roundWay').is(':checked') && (allReturnBuses||[]).length){
                    renderBuses(filteredReturn, '#returnBusesContainer');
                }else{
                    $('#returnBusesContainer').empty();
                }
            }

            $('.filter-box input[type=checkbox], .filter-box select').on('change', applyFilters);
            applyFilters();

            $('#busSearchForm').submit(function(e){
                e.preventDefault();
                const from=$('#fromInput').val().trim();
                const to=$('#toInput').val().trim();
                const journeyDate=$('input[name="journeyDate"]').val();
                if(!from||!to||!journeyDate){
                    Swal.fire('Error','Please fill out all required fields.','error');
                    return;
                }
                Swal.fire({ title:'Searching...', text:'Please wait while we fetch available routes.', icon:'info', allowOutsideClick:false, didOpen:()=>Swal.showLoading() });
                setTimeout(()=>{
                    const returnDate=$('input[name="returnDate"]').val();
                    let url=`/Bus/Results?from=${encodeURIComponent(from)}&to=${encodeURIComponent(to)}&journeyDate=${journeyDate}`;
                    if(returnDate && $('#roundWay').is(':checked')) url+=`&returnDate=${encodeURIComponent(returnDate)}`;
                    url+=`&tripType=${$('input[name="tripType"]:checked').val()}`;
                    window.location.href=url;
                },1200);
            });
        });
    </script>
}
